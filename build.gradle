// Retrieve plugins for gradle.
buildscript {
    repositories {
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
    }
}

// Setup required project resources.
repositories {
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'java'
apply from: 'automation.gradle'

// Set build properties.
sourceCompatibility = version_java
targetCompatibility = version_java
ext.version_mod = "${version_mod_major}.${version_mod_minor}.${version_mod_revis}"
version = "${version_minecraft}-${version_mod}"
group = "com.InfinityRaider.AgriCraft"
archivesBaseName = "AgriCraft"

// Setup forge.
minecraft {
    version = "${version_minecraft}-${version_forge}"
    runDir = "eclipse"
    replaceIn "reference/Reference.java"
    replace "@MAJOR@", version_mod_major
    replace "@MINOR@", version_mod_minor
    replace "@REVIS@", version_mod_revis
    
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "stable_20"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

// Configure dependencies (build-only, shaded and packed libraries)
dependencies {
    // Code Chicken
	
    // Core

    // API
}

// Configure Resource Processing.
processResources {
    inputs.property "version", project.version_mod
    inputs.property "mcversion", project.minecraft.version
    
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand ([
               'version': project.version_mod,
               'mcversion': project.minecraft.version
        ])
    }
    // Don't ask me why this can't go in the other from...
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

// Compile the jar for the APIs
task apiJar(type: Jar) {
    from sourceSets.main.allSource
    from sourceSets.main.output
    include 'com/InfinityRaider/AgriCraft/api/**/*'
    classifier = 'api'
}

// Tell build that it needs the API compiled first.
build.dependsOn apiJar

// Javadoc
task mainAgriCraftJavadoc(type: Javadoc) {
  source = sourceSets.main.allJava
  title = "AgriCraft ${version_mod} Documentation"
  destinationDir = file("${project.docsDir}/mainJavadoc")
  failOnError = false
}

task apiAgriCraftJavadoc(type: Javadoc) {
  source = sourceSets.main.allJava
  include "**/api/**"
  title = "AgriCraft ${version_mod} API Documentation"
  destinationDir = file("${project.docsDir}/apiJavadoc")
  failOnError = false
}
